#!/usr/bin/env ruby
require "yaml"
require "optparse"
require "fileutils"

OUTPUT_DIR = "./output"

class Page
  def initialize(name, path)
    @name = name
    @path = path
  end
  def name
    @name
  end
  def path 
    @path
  end
  def output_html
    output = "<body>"
    output += "<main>"
    YAML.load_stream(File.read(@path)) do |doc|
      unless doc == nil
        doc.map {|k, v|
          output += build_html_element(k, v)
        }
      end
    end
    output += "</main>"
    output += "</body>"
    return output
  end
  def build_html_element(type, content)
    case type
    when "header-1"
      "<h1 class='header-1'>#{content}</h1>"
    when "header-2"
      "<h2 class='header-2'>#{content}</h2>"
    when "header-3"
      "<h3 class='header-3'>#{content}</h3>"
    when "image"
      fig = content.split('|', 2)
      if fig.count() > 1
        FileUtils.cp(fig[0], "#{OUTPUT_DIR}/#{fig[0]}")
        return "<figure>" +
        "<img class='image' src='#{fig[0]}'/>" +
        "<figcaption class='fig'>#{fig[1]}</figcaption>" +
        "</figure>"
      else
        FileUtils.cp(content, "#{OUTPUT_DIR}/#{content}")
        "<img class='image' src='#{content}'/>"
      end
    when "text"
      "<p class='text'>#{content}</p>"
    when "post"
      "<article class='post'>#{content}</article>"
    end
  end
end 

class Menu
  @@items = Array.new
  def intialize()
    @@items << self
  end
  def items
    @@items
  end
  def output_html
    output = "<header>"
    output += "<menu class='menu'>"
    items.map {|i|
      output += i.output_html
    }
    output += "</menu>"
    output += "</header>"
    return output
  end
end

class MenuItem
  def initialize(text, link)
    @text = text
    @link = link
  end
  def text
    @text
  end
  def link
    @link
  end
  def output_html
    page_name = "#{@link.slice(0..(@link.index('.')))}html"
    return "<li style='list-style:none' class='menu-item'><a href=#{page_name}>#{@text}</a></li>"
  end
end

class Site
  def initialize(pages, menu, style_path)
    @pages = pages
    @menu = menu
    @style_path = style_path
  end
  def output_meta_data
    output = "<head>"
    if not @style_path.nil? 
      if File.exist?(@style_path)
        FileUtils.cp(@style_path, "#{OUTPUT_DIR}/style.css")
      end
    end
    output += "<link rel='stylesheet' href='./style.css'>"
    output += "</head>"
    return output
  end
  def generate
    if @style_path.nil? || !(File.file?(@style_path))
      build_styling
    end
    for page in @pages do
      html = "<!DOCTYPE html>"
      html += "<html lang=en>"
      html += output_meta_data
      html += @menu.output_html
      html += page.output_html
      html += "</html>"
      page_name = page.name.slice(0..(page.name.index('.')))
      File.open("#{OUTPUT_DIR}/#{page_name}html", "w") do |f|
        f.truncate(0)
        f.write(html)
      end
    end
  end
  def build_styling() 
    output = "/*\n" +
              "* AUTO-GENERATED by 'Site-Generator'; Any changes\n" +
              "* made to this file, may get overriden.\n" +
              "*/\n\n"
    output += css(
      "body {
        background: #FFFFE8
      }"
    )
    output += css(
      "main, header {
        max-width: 600px;
        margin: auto;
        margin-bottom: 10px;
        background: white;
        padding 10px;
        border: 3px groove black; 
      }"
    )
    output += css(
      "menu > li {
        margin-right: 10px;
        display: inline;
      }"
    )
    output += css(
      "main > .post, .header-1, .header-2, .header-3 {
        margin: 10px;
      }"
    )
    output += css(
      ".image {
        margin: auto;
        display: block;
        width: 500px;
        height: 300px;
      }"
    )
    output += css(
      ".fig {
        font-size: 12px;
        margin: auto;
        display: block;
        width: 500px;
      }"
    )
    File.open("#{OUTPUT_DIR}/style.css", "w") do |f|
      f.truncate(0)
      f.write(output)
    end
  end
  def css(entry)
    return "#{entry}\n"
  end
end

def build_site(menu_file, pages_dir, style_path)
  Dir.mkdir(OUTPUT_DIR) unless Dir.exist?(OUTPUT_DIR)
  menu = Menu.new
  menu_yaml = YAML.load_file(menu_file)
  menu_yaml = menu_yaml["menu"]
  menu_yaml.map {|k, v|
    menu.items.push(MenuItem.new(k, v))
  }
  pages = Array.new
  Dir.children(pages_dir).map { |d| 
    if File.extname(d).downcase == ".yaml"
      page = Page.new(d, "#{pages_dir}/#{d}")
      page.output_html
      pages.push(page)
    end
  }
  site = Site.new(pages, menu, style_path)
  site.generate
end

def main
  options = {}
  OptionParser.new do |opt|
    opt.on('--menu MENU_FILE') { |o| options[:m_file] = o }
    opt.on('--dir FILE_DIR') { |o| options[:file_d] = o }
    opt.on('--stylesheet STYLESHEET') { |o| options[:style_path] = o }
  end.parse!
  build_site(options[:m_file], options[:file_d], options[:style_path])
end

main
